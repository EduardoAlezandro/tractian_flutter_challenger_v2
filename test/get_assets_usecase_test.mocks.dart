// Mocks generated by Mockito 5.4.4 from annotations
// in tractian_flutter_challenger_v2/test/get_assets_usecase_test.mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:tractian_flutter_challenger_v2/features/assets/domain/repositories/asset_repository.dart'
    as _i2;
import 'package:tractian_flutter_challenger_v2/features/assets/domain/usecases/get_companies_usecase.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAssetRepository_0 extends _i1.SmartFake
    implements _i2.AssetRepository {
  _FakeAssetRepository_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [GetAssetsUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAssetsUseCase extends _i1.Mock implements _i3.GetAssetsUseCase {
  MockGetAssetsUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AssetRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeAssetRepository_0(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i2.AssetRepository);

  @override
  _i4.Future<Map<String, dynamic>> call(String? companyId) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [companyId],
        ),
        returnValue:
            _i4.Future<Map<String, dynamic>>.value(<String, dynamic>{}),
      ) as _i4.Future<Map<String, dynamic>>);
}
